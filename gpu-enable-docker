#check IOMMU on proxmox

One very important thing to pay attention to is how your system is booting, ie determine the bootloader.
# efibootmgr -v
Is it GRUB [...EFI\proxmox\grubx64.efi] or SYSTEMD-BOOT[...EFI\systemd\systemd-bootx64.efi].
Then use the proper commands to enable PCIe passthrough using this guide from proxmox. Do pay attention to the part regarding GRUB, SYSTEMD-BOOT etc. as some of them differ a bit.
Once done and rebooted pcie_acs_override=downstream or pcie_acs_override=downstream, multifunction can be added to the bootloader.
I have been modifying the the GRUB bootloader and IOMMU groups never separated. Then I noticed my bootloader was using SYSTEMD-BOOT and not GRUB. After making the proper changes voila, all devices are now on their own separate IOMMU groups now.
Hope this helps someone who's struggling to get this to work.



#working inatall nvidia
sudo ubuntu-drivers install --gpgpu nvidia:530
sudo apt install nvidia-utils-530

taken from https://cschranz.medium.com/set-up-your-own-gpu-based-jupyterlab-e0d45fcacf43

## start docker without sudo
sudo usermod -aG docker ${USER}
su - ${USER}
groups  # check if docker is listed
sudo usermod -aG docker ${USER}
docker run hello-world # check if it works without sudo

##install docker compose
mkdir -p ~/.docker/cli-plugins/
curl -SL https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
chmod +x ~/.docker/cli-plugins/docker-compose
docker compose version  # check the version

##install nvidia docker
sudo apt-get update
sudo systemctl restart docker
curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey |   sudo apt-key add -
distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list |   sudo tee /etc/apt/sources.list.d/nvidia-docker.list
sudo apt-get update
sudo apt-get install -y nvidia-docker2
sudo reboot

##test
docker run --gpus all nvidia/cuda:11.6.2-cudnn8-runtime-ubuntu20.04 nvidia-smi
